import useDebounce from './UseDebounce.js';
import Locksmith from '../services/Locksmith.js';
import {useQuery} from 'react-query';
import {
  useProvider,
  useContract,
  usePrepareContractWrite,
  useContractWrite
} from 'wagmi';
import {ethers} from 'ethers';


/**
 * useTrustCreator 
 *
 * This method will take in all of the parameters from the trust wizard, determine what is
 * considered valid, and call the correct trust creation method based on the inputs.
 *
 * All of the inputs are considered the same hashes as generated by TrustWizard.js
 */
export function useTrustCreator(trustName, beneficiaries, trustee, deadman, go, errorFunc, successFunc) {
  const debouncedTrustName = useDebounce(trustName.trim(), 500);
  var contractWrite = null;
  
  // standard trust with no other keys or nothing
  //if (beneficiaries.length < 1) {
    contractWrite = Locksmith.getContractWrite('TrustCreator', 'spawnTrust',
      [ethers.utils.formatBytes32String(debouncedTrustName), [], [], []],
      go);
  // standard trust with just some keys
  //} else if (trustee.alias.length < 1) {

  // standard trust with a default trustee
  //} else if (deadman.description.length < 1) {

  // a full monty with everything
  //} else {

  //}

  const preparation = usePrepareContractWrite(contractWrite);
  return useContractWrite({...preparation.config,
    onError(error) {
      errorFunc(error);
    },
    onSuccess(data) {
      successFunc(data);
    }
  });
}

/**
 * useChallengeAlarm
 *
 * Will call #challengeAlarm on the contract.
 */
export function useChallengeAlarm(eventHash, errorFunc, successFunc) {
  const preparation = usePrepareContractWrite(
    Locksmith.getContractWrite('AlarmClock', 'challengeAlarm',
      [eventHash], eventHash !== null
    )
  );

  return useContractWrite({...preparation.config,
    onError(error) {
      errorFunc(error);
    },
    onSuccess(data) {
      successFunc(data);
    }
  });
}

/**
 * useSnoozeAlarm
 *
 * Will call #snoozeAlarm on the contract.
 */
export function useSnoozeAlarm(eventHash, snoozeKeyId, errorFunc, successFunc) {
  const preparation = usePrepareContractWrite(
    Locksmith.getContractWrite('AlarmClock', 'snoozeAlarm',
      [eventHash, snoozeKeyId], eventHash !== null && snoozeKeyId !== null
    )
  );

  return useContractWrite({...preparation.config,
    onError(error) {
      errorFunc(error);
    },
    onSuccess(data) {
      successFunc(data);
    }
  });
}
