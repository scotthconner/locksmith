import useDebounce from './UseDebounce.js';
import Locksmith from '../services/Locksmith.js';
import {
  useAccount,
  usePrepareContractWrite,
  useContractWrite
} from 'wagmi';
import {ethers} from 'ethers';


/**
 * useTrustCreator 
 *
 * This method will take in all of the parameters from the trust wizard, determine what is
 * considered valid, and call the correct trust creation method based on the inputs.
 *
 * All of the inputs are considered the same hashes as generated by TrustWizard.js
 */
export function useTrustCreator(trustName, beneficiaries, trustee, deadman, go, errorFunc, successFunc) {
  const { address } = useAccount();
  const debouncedTrustName = useDebounce(trustName.trim(), 500);
  var contractWrite = null;
 
  const transcribeKeys = function(keyArray) {
    var receivers = keyArray.map((b) => b.sendToRoot ? address : b.destination);
    var aliases   = keyArray.map((b) => ethers.utils.formatBytes32String(b.alias));
    var soulbinds = keyArray.map((b) => b.soulbind);
    return {receivers, aliases, soulbinds};
  };

  // standard trust with no other keys or nothing
  if (beneficiaries.length < 1) {
    contractWrite = Locksmith.getContractWrite('TrustCreator', 'spawnTrust',
      [ethers.utils.formatBytes32String(debouncedTrustName), [], [], []],
      go);
  // standard trust with just some keys
  } else if (trustee.alias.length < 1) {
    // collect out the data
    const {receivers, aliases, soulbinds} = transcribeKeys(beneficiaries);
    contractWrite = Locksmith.getContractWrite('TrustCreator', 'spawnTrust',
      [ethers.utils.formatBytes32String(debouncedTrustName), receivers, aliases, soulbinds],
      go);
  // standard trust with a default trustee
  } else if (deadman.description.length < 1) {
    // flatten the trustee onto the front before transcription
    const {receivers, aliases, soulbinds} = transcribeKeys([trustee, beneficiaries].flat());
    contractWrite = Locksmith.getContractWrite('TrustCreator', 'createDeadSimpleTrust',
      [ethers.utils.formatBytes32String(debouncedTrustName), receivers, aliases, soulbinds, 0, 0],
      go);
  // a full monty with everything
  } else {
    // flatten the trustee onto the front before transcription
    const {receivers, aliases, soulbinds} = transcribeKeys([trustee, beneficiaries].flat());
    contractWrite = Locksmith.getContractWrite('TrustCreator', 'createDeadSimpleTrust',
      [ethers.utils.formatBytes32String(debouncedTrustName), receivers, aliases, soulbinds, 
        Math.floor(deadman.alarmTime.getTime() / 1000), // javascript is ms, solidity is seconds 
        parseInt(deadman.snoozeUnitCount)*parseInt(deadman.snoozeIntervalUnit)],
      go);
  }

  const preparation = usePrepareContractWrite(contractWrite);
  return useContractWrite({...preparation.config,
    onError(error) {
      errorFunc(error);
    },
    onSuccess(data) {
      successFunc(data);
    }
  });
}
